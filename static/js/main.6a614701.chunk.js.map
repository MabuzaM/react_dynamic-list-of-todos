{"version":3,"sources":["apis/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["USERS_API","getUser","userId","a","fetch","then","response","json","userFromServer","TodoList","todos","onSelectUser","onSelectCriteria","onSearchTodos","useState","query","setQuery","className","value","type","onChange","event","target","name","id","map","todo","classNames","completed","readOnly","checked","title","onClick","CurrentUser","onClearSelectedUser","selectedUser","setSelectedUser","LoadUser","useCallback","user","useEffect","email","phone","App","selectedUserId","setSelectedUserId","setTodos","loadTodos","loadedTodos","loadSelectedUser","newSelectedUserId","criteria","filter","Error","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a614701.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nconst TODOS_API = 'https://mate.academy/students-api/todos';\nconst USERS_API = 'https://mate.academy/students-api/users';\n\nexport const getAllTodos = (): Promise<Todo[]> => (\n  fetch(TODOS_API)\n    .then(response => response.json())\n);\n\nexport const getAllUsers = (): Promise<User[]> => (\n  fetch(USERS_API)\n    .then(response => response.json())\n);\n\nexport const getUser = async (userId: number) => {\n  const userFromServer = await fetch(`${USERS_API}/${userId}`)\n    .then(response => response.json());\n\n  return userFromServer;\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../react-app-env';\nimport './TodoList.scss';\n\ninterface TodoListProps {\n  todos: Todo[];\n  userId: number;\n  onSelectUser: (newSelectedUserId: number) => void;\n  onSelectCriteria: (criteria: string) => void;\n  onSearchTodos: (searchKey: string) => void;\n}\n\nexport const TodoList: React.FC<TodoListProps> = (\n  {\n    todos,\n    userId,\n    onSelectUser,\n    onSelectCriteria,\n    onSearchTodos,\n  },\n) => {\n  const [query, setQuery] = useState('');\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        value={query}\n        type=\"text\"\n        onChange={(event) => {\n          setQuery(event.target.value);\n          onSearchTodos(query);\n        }}\n      />\n\n      <select\n        name=\"criteria\"\n        id=\"criteria\"\n        onChange={(event) => onSelectCriteria(event.target.value)}\n      >\n        <option\n          value=\"all\"\n        >\n          All\n        </option>\n        <option\n          value=\"active\"\n        >\n          Active\n        </option>\n        <option\n          value=\"completed\"\n        >\n          Completed\n        </option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {\n            todos.map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    {\n                      'TodoList__user-button--selected': userId === todo.userId,\n                    },\n                  )}\n                  type=\"button\"\n                  onClick={() => onSelectUser(todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { getUser } from '../../apis/api';\nimport { User } from '../../react-app-env';\nimport './CurrentUser.scss';\n\ninterface CurrentUserProps {\n  userId: number;\n  onClearSelectedUser: (id: number) => void;\n}\n\nexport const CurrentUser: React.FC<CurrentUserProps> = (\n  { userId, onClearSelectedUser },\n) => {\n  const [selectedUser, setSelectedUser] = useState<\n  User | null | undefined>(null);\n\n  const LoadUser = useCallback(\n    async () => {\n      const user = await getUser(userId);\n\n      setSelectedUser(user);\n    }, [],\n  );\n\n  useEffect(\n    () => {\n      LoadUser();\n\n      return () => setSelectedUser(null);\n    },\n    [userId],\n  );\n\n  return (\n    <div className=\"CurrentUser\">\n      {\n        selectedUser\n          ? (\n            <>\n              <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUser.id}`}</span></h2>\n\n              <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n              <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n              <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n              <button\n                type=\"button\"\n                onClick={() => onClearSelectedUser(0)}\n                className=\"button CurrentUser__clear\"\n              >\n                Clear\n              </button>\n            </>\n          )\n          : (\n            <p>User loading</p>\n          )\n      }\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { Todo } from './react-app-env';\nimport { getAllTodos } from './apis/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const loadTodos = useCallback(\n    async () => {\n      const loadedTodos = await getAllTodos();\n\n      setTodos(loadedTodos);\n    },\n    [],\n  );\n\n  const loadSelectedUser = useCallback(\n    (newSelectedUserId: number) => {\n      setSelectedUserId(newSelectedUserId);\n    },\n    [],\n  );\n\n  const searchTodos = (criteria: string) => {\n    setTodos(todos.filter(todo => todo.title.includes(criteria)));\n  };\n\n  const filterTodos = (criteria: string) => {\n    switch (criteria) {\n      case 'all':\n        loadTodos();\n        break;\n\n      case 'active':\n        setTodos(todos.filter(todo => !todo.completed));\n        break;\n\n      case 'completed':\n        setTodos(todos.filter(todo => todo.completed));\n        break;\n\n      default:\n        throw Error('Something went wrong');\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          userId={selectedUserId}\n          onSelectUser={loadSelectedUser}\n          onSelectCriteria={filterTodos}\n          onSearchTodos={searchTodos}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onClearSelectedUser={loadSelectedUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}