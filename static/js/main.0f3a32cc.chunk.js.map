{"version":3,"sources":["apis/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getUser","id","a","fetch","toString","then","response","json","userFromServer","TodoList","todos","userId","onSelectUser","onSelectCriteria","onSearchTodos","useState","query","setQuery","className","value","type","onChange","event","target","name","map","todo","classNames","completed","readOnly","checked","title","onClick","CurrentUser","onClearSelectedUser","selectedUser","setSelectedUser","LoadUser","useCallback","useEffect","email","phone","App","selectedUserId","setSelectedUserId","setTodos","loadTodos","loadedTodos","loadSelectedUser","newSelectedUserId","searchTodos","criteria","searchedTodos","filter","includes","filterTodos","activeTodos","completedtodos","Error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f3a32cc.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getAllTodos = (): Promise<Todo[]> => (\n  fetch(`${BASE_URL}/todos`)\n    .then(response => response.json())\n);\n\nexport const getUser = async (id: number): Promise<User> => {\n  const userFromServer = await fetch(`${BASE_URL}/users/${id.toString()}`)\n    .then(response => response.json());\n\n  return userFromServer;\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../react-app-env';\nimport './TodoList.scss';\n\ninterface TodoListProps {\n  todos: Todo[];\n  userId: number;\n  onSelectUser: (newSelectedUserId: number) => void;\n  onSelectCriteria: (criteria: string) => void;\n  onSearchTodos: (searchKey: string) => void;\n}\n\nexport const TodoList: React.FC<TodoListProps> = (\n  {\n    todos,\n    userId,\n    onSelectUser,\n    onSelectCriteria,\n    onSearchTodos,\n  },\n) => {\n  const [query, setQuery] = useState('');\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        value={query}\n        type=\"text\"\n        data-cy=\"filterByTitle\"\n        onChange={(event) => {\n          setQuery(event.target.value);\n          onSearchTodos(query);\n        }}\n      />\n\n      <select\n        name=\"criteria\"\n        id=\"criteria\"\n        onChange={(event) => onSelectCriteria(event.target.value)}\n      >\n        <option\n          value=\"all\"\n        >\n          All\n        </option>\n        <option\n          value=\"active\"\n        >\n          Active\n        </option>\n        <option\n          value=\"completed\"\n        >\n          Completed\n        </option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {\n            todos.map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  data-cy=\"userButton\"\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    {\n                      'TodoList__user-button--selected': userId === todo.userId,\n                    },\n                  )}\n                  type=\"button\"\n                  onClick={() => onSelectUser(todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { getUser } from '../../apis/api';\nimport { User } from '../../react-app-env';\nimport './CurrentUser.scss';\n\ninterface CurrentUserProps {\n  userId: number;\n  onClearSelectedUser: (id: number) => void;\n}\n\nexport const CurrentUser: React.FC<CurrentUserProps> = (\n  { userId, onClearSelectedUser },\n) => {\n  const [selectedUser, setSelectedUser] = useState<\n  User | null | undefined>(null);\n\n  const LoadUser = useCallback(\n    async () => {\n      // const user = getUser(userId);\n\n      setSelectedUser(await getUser(userId));\n    }, [selectedUser],\n  );\n\n  useEffect(\n    () => {\n      LoadUser();\n\n      // return () => setSelectedUser(null);\n    },\n    [selectedUser],\n  );\n\n  return (\n    <div className=\"CurrentUser\">\n      {\n        selectedUser\n          ? (\n            <>\n              <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUser.id}`}</span></h2>\n\n              <h3\n                className=\"CurrentUser__name\"\n                data-cy=\"userName\"\n              >\n                {selectedUser.name}\n              </h3>\n              <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n              <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n              <button\n                type=\"button\"\n                onClick={() => onClearSelectedUser(0)}\n                className=\"button CurrentUser__clear\"\n              >\n                Clear\n              </button>\n            </>\n          )\n          : (\n            <p>User loading</p>\n          )\n      }\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { Todo } from './react-app-env';\nimport { getAllTodos } from './apis/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const loadTodos = useCallback(\n    async () => {\n      const loadedTodos = await getAllTodos();\n\n      setTodos(loadedTodos);\n\n      return loadedTodos;\n    },\n    [],\n  );\n\n  const loadSelectedUser = useCallback(\n    (newSelectedUserId: number) => {\n      setSelectedUserId(newSelectedUserId);\n    },\n    [selectedUserId],\n  );\n\n  const searchTodos = async (criteria: string) => {\n    const searchedTodos = (await loadTodos())\n      .filter(todo => todo.title\n        .includes(criteria));\n\n    setTodos(searchedTodos);\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const filterTodos = async (criteria: string) => {\n    let activeTodos: Todo[];\n    let completedtodos: Todo[];\n\n    switch (criteria) {\n      case 'all':\n        loadTodos();\n        break;\n\n      case 'active':\n        activeTodos = (await loadTodos()).filter(todo => !todo.completed);\n\n        setTodos(activeTodos);\n        break;\n\n      case 'completed':\n        completedtodos = (await loadTodos()).filter(todo => todo.completed);\n        setTodos(completedtodos);\n        break;\n\n      default:\n        throw Error('Something went wrong');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          userId={selectedUserId}\n          onSelectUser={loadSelectedUser}\n          onSelectCriteria={filterTodos}\n          onSearchTodos={searchTodos}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onClearSelectedUser={loadSelectedUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}